{"id":"cYXC","dependencies":[{"name":"D:\\Web Development\\mallone3D\\package.json","includedInParent":true,"mtime":1680117085946},{"name":"D:\\Web Development\\mallone3D\\node_modules\\three\\package.json","includedInParent":true,"mtime":1680117024254},{"name":"three","loc":{"line":4,"column":7,"index":48},"parent":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\ShaderPass.js","resolved":"D:\\Web Development\\mallone3D\\node_modules\\three\\build\\three.module.js"},{"name":"./Pass.js","loc":{"line":5,"column":37,"index":94},"parent":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\ShaderPass.js","resolved":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\Pass.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaderPass = void 0;\nvar _three = require(\"three\");\nvar _Pass2 = require(\"./Pass.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar ShaderPass = /*#__PURE__*/function (_Pass) {\n  _inherits(ShaderPass, _Pass);\n  var _super = _createSuper(ShaderPass);\n  function ShaderPass(shader, textureID) {\n    var _this;\n    _classCallCheck(this, ShaderPass);\n    _this = _super.call(this);\n    _this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n    if (shader instanceof _three.ShaderMaterial) {\n      _this.uniforms = shader.uniforms;\n      _this.material = shader;\n    } else if (shader) {\n      _this.uniforms = _three.UniformsUtils.clone(shader.uniforms);\n      _this.material = new _three.ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: _this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n    _this.fsQuad = new _Pass2.FullScreenQuad(_this.material);\n    return _this;\n  }\n  _createClass(ShaderPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer.texture;\n      }\n      this.fsQuad.material = this.material;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n        if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n        this.fsQuad.render(renderer);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.material.dispose();\n      this.fsQuad.dispose();\n    }\n  }]);\n  return ShaderPass;\n}(_Pass2.Pass);\nexports.ShaderPass = ShaderPass;"},"sourceMaps":null,"error":null,"hash":"7dbbef9f44651a05bb759d791869f445","cacheData":{"env":{}}}