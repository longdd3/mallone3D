{"id":"yPH9","dependencies":[{"name":"D:\\Web Development\\mallone3D\\package.json","includedInParent":true,"mtime":1680117085946},{"name":"three","loc":{"line":3,"column":10,"index":33},"parent":"D:\\Web Development\\mallone3D\\src\\js\\customPass.js","resolved":"D:\\Web Development\\mallone3D\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Aberration = void 0;\nvar _three = require(\"three\");\n/**\r\n * Dot screen shader\r\n * based on glfx.js sepia shader\r\n * https://github.com/evanw/glfx.js\r\n */\nvar Aberration = {\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'distort': {\n      value: 0.5\n    },\n    'time': {\n      value: 0\n    }\n  },\n  vertexShader: /* glsl */\"\\n    varying vec2 vUv;\\n    void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n    }\",\n  fragmentShader: /* glsl */\"\\n    uniform vec2 center;\\n    uniform float angle;\\n    uniform float time;\\n    uniform float progress;\\n    uniform float scale;\\n    uniform vec2 tSize;\\n    uniform sampler2D tDiffuse;\\n    varying vec2 vUv;\\n    uniform sampler2D tInput;\\n    uniform vec2 resolution;\\n\\n\\n    const float max_distort = 1.                       ;\\n    const int num_iter = 12;\\n    const float reci_num_iter_f = 1.0 / float(num_iter);\\n\\n\\n    vec2 barrelDistortion(vec2 coord, float amt) {\\n        vec2 cc = coord - 0.5;\\n        float dist = dot(cc, cc);\\n        return coord + cc * dist * amt;\\n    }\\n    \\n    float sat( float t )\\n    {\\n        return clamp( t, 0.0, 1.0 );\\n    }\\n    \\n    float linterp( float t ) {\\n        return sat( 1.0 - abs( 2.0*t - 1.0 ) );\\n    }\\n    \\n    float remap( float t, float a, float b ) {\\n        return sat( (t - a) / (b - a) );\\n    }\\n    \\n    vec4 spectrum_offset( float t ) {\\n        vec4 ret;\\n        float lo = step(t,0.5);\\n        float hi = 1.0-lo;\\n        float w = linterp( remap( t, 1.0/6.0, 5.0/6.0 ) );\\n        ret = vec4(lo,1.0,hi, 1.) * vec4(1.0-w, w, 1.0-w, 1.);\\n    \\n        return pow( ret, vec4(1.0/2.2) );\\n    }\\n    \\n \\n    \\n    void main()\\n    {\\t\\n        vec2 zUV=(vUv - vec2(0.5))*0.95 + vec2(0.5);\\n \\n        vec4 sumcol = vec4(0.0);\\n        vec4 sumw = vec4(0.0);\\t\\n        for ( int i=0; i<num_iter;++i )\\n        {\\n            float t = float(i) * reci_num_iter_f;\\n            vec4 w = spectrum_offset( t );\\n            sumw += w;\\n            sumcol += w * texture2D( tDiffuse, barrelDistortion(zUV, .2 * max_distort*t ) );\\n        }\\n            \\n   \\n        gl_FragColor = sumcol / sumw;\\n    }\\n   \\n    \"\n};\nexports.Aberration = Aberration;"},"sourceMaps":null,"error":null,"hash":"7c7e6ff7b59a40f7c0ba1cd146ad594c","cacheData":{"env":{}}}