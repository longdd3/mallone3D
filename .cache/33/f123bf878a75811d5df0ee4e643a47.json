{"id":"Dhc5","dependencies":[{"name":"D:\\Web Development\\mallone3D\\package.json","includedInParent":true,"mtime":1680117085946},{"name":"D:\\Web Development\\mallone3D\\node_modules\\three\\package.json","includedInParent":true,"mtime":1680117024254},{"name":"three","loc":{"line":5,"column":7,"index":53},"parent":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\EffectComposer.js","resolved":"D:\\Web Development\\mallone3D\\node_modules\\three\\build\\three.module.js"},{"name":"../shaders/CopyShader.js","loc":{"line":6,"column":27,"index":89},"parent":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\EffectComposer.js","resolved":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\shaders\\CopyShader.js"},{"name":"./ShaderPass.js","loc":{"line":7,"column":27,"index":144},"parent":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\EffectComposer.js","resolved":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\ShaderPass.js"},{"name":"./MaskPass.js","loc":{"line":9,"column":30,"index":235},"parent":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\EffectComposer.js","resolved":"D:\\Web Development\\mallone3D\\node_modules\\three\\examples\\jsm\\postprocessing\\MaskPass.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EffectComposer = void 0;\nvar _three = require(\"three\");\nvar _CopyShader = require(\"../shaders/CopyShader.js\");\nvar _ShaderPass = require(\"./ShaderPass.js\");\nvar _MaskPass = require(\"./MaskPass.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar EffectComposer = /*#__PURE__*/function () {\n  function EffectComposer(renderer, renderTarget) {\n    _classCallCheck(this, EffectComposer);\n    this.renderer = renderer;\n    if (renderTarget === undefined) {\n      var size = renderer.getSize(new _three.Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new _three.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    this.passes = [];\n    this.copyPass = new _ShaderPass.ShaderPass(_CopyShader.CopyShader);\n    this.clock = new _three.Clock();\n  }\n  _createClass(EffectComposer, [{\n    key: \"swapBuffers\",\n    value: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(pass) {\n      this.passes.push(pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"insertPass\",\n    value: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"removePass\",\n    value: function removePass(pass) {\n      var index = this.passes.indexOf(pass);\n      if (index !== -1) {\n        this.passes.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(passIndex) {\n      for (var i = passIndex + 1; i < this.passes.length; i++) {\n        if (this.passes[i].enabled) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render(deltaTime) {\n      // deltaTime value is in seconds\n\n      if (deltaTime === undefined) {\n        deltaTime = this.clock.getDelta();\n      }\n      var currentRenderTarget = this.renderer.getRenderTarget();\n      var maskActive = false;\n      for (var i = 0, il = this.passes.length; i < il; i++) {\n        var pass = this.passes[i];\n        if (pass.enabled === false) continue;\n        pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.getContext();\n            var stencil = this.renderer.state.buffers.stencil;\n\n            //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n            stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n            //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n            stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n          }\n          this.swapBuffers();\n        }\n        if (_MaskPass.MaskPass !== undefined) {\n          if (pass instanceof _MaskPass.MaskPass) {\n            maskActive = true;\n          } else if (pass instanceof _MaskPass.ClearMaskPass) {\n            maskActive = false;\n          }\n        }\n      }\n      this.renderer.setRenderTarget(currentRenderTarget);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(renderTarget) {\n      if (renderTarget === undefined) {\n        var size = this.renderer.getSize(new _three.Vector2());\n        this._pixelRatio = this.renderer.getPixelRatio();\n        this._width = size.width;\n        this._height = size.height;\n        renderTarget = this.renderTarget1.clone();\n        renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      }\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._width = width;\n      this._height = height;\n      var effectiveWidth = this._width * this._pixelRatio;\n      var effectiveHeight = this._height * this._pixelRatio;\n      this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n      this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n      for (var i = 0; i < this.passes.length; i++) {\n        this.passes[i].setSize(effectiveWidth, effectiveHeight);\n      }\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this.setSize(this._width, this._height);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.copyPass.dispose();\n    }\n  }]);\n  return EffectComposer;\n}();\nexports.EffectComposer = EffectComposer;"},"sourceMaps":null,"error":null,"hash":"23b1cc207a82cfdc8d4614a44af7f6ba","cacheData":{"env":{}}}